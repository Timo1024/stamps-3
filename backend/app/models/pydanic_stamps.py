from pydantic import BaseModel
from typing import Optional
from datetime import date

# Pydantic model for creating a new stamp (request body)
class StampCreate(BaseModel):
    number: Optional[str]
    type: Optional[str]
    denomination: Optional[str]
    color: Optional[str]
    description: Optional[str]
    stamps_issued: Optional[str]
    mint_condition: Optional[str]
    unused: Optional[str]
    used: Optional[str]
    letter_fdc: Optional[str]
    date_of_issue: Optional[date]
    perforations: Optional[str]
    sheet_size: Optional[str]
    designed: Optional[str]
    engraved: Optional[str]
    height_width: Optional[str]
    image_accuracy: Optional[int]
    perforation_horizontal: Optional[float]
    perforation_vertical: Optional[float]
    perforation_keyword: Optional[str]
    value_from: Optional[float]
    value_to: Optional[float]
    number_issued: Optional[int]
    mint_condition_float: Optional[float]
    unused_float: Optional[float]
    used_float: Optional[float]
    letter_fdc_float: Optional[float]
    sheet_size_amount: Optional[float]
    sheet_size_x: Optional[float]
    sheet_size_y: Optional[float]
    sheet_size_note: Optional[str]
    height: Optional[float]
    width: Optional[float]
    setid: Optional[int]

# Pydantic model for responding with stamp data
class StampResponse(BaseModel):
    stampid: int
    number: Optional[str]
    type: Optional[str]
    denomination: Optional[str]
    color: Optional[str]
    description: Optional[str]
    stamps_issued: Optional[str]
    mint_condition: Optional[str]
    unused: Optional[str]
    used: Optional[str]
    letter_fdc: Optional[str]
    date_of_issue: Optional[date]
    perforations: Optional[str]
    sheet_size: Optional[str]
    designed: Optional[str]
    engraved: Optional[str]
    height_width: Optional[str]
    image_accuracy: Optional[int]
    perforation_horizontal: Optional[float]
    perforation_vertical: Optional[float]
    perforation_keyword: Optional[str]
    value_from: Optional[float]
    value_to: Optional[float]
    number_issued: Optional[int]
    mint_condition_float: Optional[float]
    unused_float: Optional[float]
    used_float: Optional[float]
    letter_fdc_float: Optional[float]
    sheet_size_amount: Optional[float]
    sheet_size_x: Optional[float]
    sheet_size_y: Optional[float]
    sheet_size_note: Optional[str]
    height: Optional[float]
    width: Optional[float]
    setid: Optional[int]

    class Config:
        orm_mode = True  # Enables compatibility with SQLAlchemy models
